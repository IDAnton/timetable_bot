import re
from emoji import UNICODE_EMOJI
import custom_timetable
import keyboards


def is_emoji(text: str):
    text.replace(' ', '')
    return text[0] if text[0] in UNICODE_EMOJI['en'] else False


def format_text(text: str):
    res = re.sub(" +", " ", text)
    if is_emoji(text):
        if res[1] == ' ':
            return res[0] + res[2::]
    return res


def process_lesson_str(text, text_type):
    time_emoj = 'üïô'  # üïô
    subject_emoj = 'üìö'  # üìö
    tutor_emoj = 'üë®‚Äçüè´'  # üë®‚Äçüè´
    class_emoj = 'üö™'  # üö™
    if not text:
        return ''
    if is_emoji(text):
        return text
    else:
        if text_type == 'subject':
            return subject_emoj + text
        if text_type == 'tutor':
            return tutor_emoj + text
        if text_type == 'room':
            return class_emoj + text


def get_all_subjects_on_day(origin, insert_content, order=None) -> str:
    subjects = custom_timetable.get_subject_names(origin=origin, insert_content=insert_content)
    types = custom_timetable.get_types_name(origin=origin, insert_content=insert_content)
    weeks = custom_timetable.get_weeks_name(origin=origin, insert_content=insert_content)
    subject_text = ''
    if order is None:
        for i in range(len(subjects)):
            res_types = types[i] if types else ''
            res_weeks = weeks[i] if weeks else ''
            subject_text += f"{subjects[i]} {res_types}{res_weeks}\n"
    else:
        subject_text = f"{subjects[order]} {types[order]}{weeks[order]}\n"
    return subject_text


def get_all_subjects_on_day_list(origin, insert_content) -> list:
    subjects = custom_timetable.get_subject_names(origin=origin, insert_content=insert_content)
    types = custom_timetable.get_types_name(origin=origin, insert_content=insert_content)
    weeks = custom_timetable.get_weeks_name(origin=origin, insert_content=insert_content)
    subject_list = []
    for i in range(len(subjects)):
        subject_list.append(f"{subjects[i]} {types[i]}{weeks[i]}")
    return subject_list


def editing_text(context):
    return 'üïô ' + keyboards.editing_data_format(context.chat_data['edit_timetable'])['day'] + \
                   ', ' + keyboards.editing_data_format(context.chat_data['edit_timetable'])['time']\
                   + '\n\n–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ ' \
                     '–∑–∞–ø–æ–ª–Ω–∏ –ø—Ä–µ–¥–º–µ—Ç, ' \
                     '–ø—Ä–µ–ø–æ–¥–∞ –∏ –∞—É–¥–∏—Ç–æ—Ä–∏—é. (' \
                     '–ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ ' \
                     '–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞, ' \
                     '–æ—Å—Ç–∞–ª—å–Ω–æ–µ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)'


def toggle_week(data):
    if data == "" or data is None or not data:
        return " –ß–µ—Ç–Ω–∞—è"
    if data == " –ß–µ—Ç–Ω–∞—è":
        return " –ù–µ—á–µ—Ç–Ω–∞—è"
    if data == " –ù–µ—á–µ—Ç–Ω–∞—è":
        return ""

